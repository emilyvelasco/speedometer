
/*
  LiquidCrystal Library - Hello World

This sketch allows an Arduino to act as a speedometer. 
Data input can come from a magnet glued to the rim or
spoke of a wheel, and a hall-effect sensor.

(If you use a reed switch instead of a hall-effect sensor,
you will probably need to modify the sketch to include some debouncing.
If you use an optical sensor, you might need Schmitt trigger circuitry.)

The sketch times how long it takes in milliseconds between pulses from
the sensor, and converts it into feet per minute. It is written for a 
bandsaw with 16-inch wheels, and six magnets evenly spaced on one of the 
wheels. 

The data is written to an LCD with Hitachi HD44780 compatible chipsets
using the LiquidCrystal library.


  The circuit:
 * LCD RS pin to digital pin 12
 * LCD Enable pin to digital pin 11
 * LCD D4 pin to digital pin 5
 * LCD D5 pin to digital pin 4
 * LCD D6 pin to digital pin 3
 * LCD D7 pin to digital pin 2
 * LCD R/W pin to ground
 * LCD VSS pin to ground
 * LCD VCC pin to 5V
 * 10K resistor:
 * ends to +5V and ground
 * wiper to LCD VO pin (pin 3)

 Library originally added 18 Apr 2008
 by David A. Mellis
 library modified 5 Jul 2009
 by Limor Fried (http://ladyada.net)
 example added 9 Jul 2009
 by Tom Igoe
 modified 22 Nov 2010
 by Tom Igoe
 modified 7 Nov 2016
 by Arturo Guadalupi

 This example code is in the public domain.

 http://arduino.cc/en/Tutorial/LiquidCrystalHelloWorld

*/

// include the library code:
#include <LiquidCrystal.h>

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
unsigned long TimerCount; //unsigned long is a type of variable that can be very large without overflowing. this is necessary because the milliseconds add up quickly as the program runs
unsigned long previousTimerCount;
unsigned long LCDUpdateTime;
int sensorPin = 8;
int Pulse = 0;
int pinState = LOW;
int oldpinState = LOW;
int LCDprintValue = 0;
int sawPulse = 1;


void setup() {
  pinMode(sensorPin, INPUT); //sets pin 8 to input
  TimerCount = millis(); //gives TimerCount a millisecond value to start with. millis() is the current time in milliseconds since the Arduino booted up
  previousTimerCount = millis(); //gives previousTimerCount a millisecond value to start with
  lcd.begin(20, 4);   // set up the LCD's number of columns and rows
  lcd.print("Feet per minute:");   // Print a message to the LCD
  
}

void loop() {
   
    pinState = digitalRead(sensorPin); //read the state of pin 8

            if (pinState == HIGH && pinState != oldpinState){ //checks if pin 8 is high and if that's different than the last time it checked. if both are true, it means a pulse from the sensor is being received
                TimerCount = millis(); //records the time in milliseconds so we know when the pulse was received
                LCDprintValue = (((unsigned long)41887.8)/(TimerCount - previousTimerCount)); //tubtracts the time the last pulse was received from the time the newest pulse was receieved and does some math to turn time the between pulses into a speed value
                sawPulse = 1; //sets a flag that we can use to tell if the speed has dropped to zero

                previousTimerCount = TimerCount; //sets previousTimerCount to whatever value was recorded for TimerCount before math was calculated
      }

              if (LCDUpdateTime <= millis()){ //checks to see if LCDUpdateTime is less than current time in milliseconds. this is so the LCD only updates once a second
                 lcd.setCursor(0, 1); //places the cursor in the first column on the second row of the LCD
                 
                 if (sawPulse == 1){ //checks to see if sawPulse was set to 1 by the first if statement. if it has been, it means a pulse was detected within the last second and the wheel is still turning
                 lcd.print(LCDprintValue); //prints the speed value calculated above to the LCD
                 lcd.print("   "); //prints spaces to clear the line now in preparation for the next speed value to be displayed
                 sawPulse = 0; //resets sawPulse to zero in preparation for the else statement below
                 }
                 else { //if sawPulse is anything besides 1, it means the program has not detected a new pulse within the last second, and it can be assumed speed has dropped to zero
                 lcd.print("0"); //prints zero for the speed
                 lcd.print("   "); //prints spaces to clear the line now in preparation for the next speed value to be displayed              
                 }
                 LCDUpdateTime = (millis()+1000); //checks the time, adds 1000 milliseconds (1 second) to it, and records it. this value is compared against the time in milliseconds above to see if a second has elapsed. 

              }


              
      oldpinState = pinState;

    }
